*** Settings ***
Library           Collections
Library           String
Library           XML
Library           Libs/Common/BusManager.py
Library           Robot/Libs/Common/CTATester.py
Library           Robot/Libs/Common/CANoeTester.py
Library           Robot/Libs/Common/TelnetClientTester.py
Library           Robot/Libs/Common/BusManager.py
Library           Libs/Common/LogManager.py
Library           Robot/Libs/Common/ResourceManager.py
Library           Robot/Libs/Common/WebSocketHelper.py
Resource          Resources/TestSetup_kw.robot
Resource          Robot/Libs/Common/DriverAuthentication_kw.robot

Resource          Libs/RESTUtils.txt
Resource          Robot/Resources/DriverLoginLogout_kw.robot

Resource          Libs/Common/WlanHelper.txt

Suite Setup       AssistanceRequest Suite Setup
Suite Teardown    AssistanceRequest Suite Teardown

Test Setup        AssistanceRequest Test Setup
Test Teardown     AssistanceRequest Test Teardown

Force Tags    AssistanceRequest
    ...    TGW2.1
    ...    Rest_OverWLAN
    ...    TEA2_VT
    ...    UTESP      
*** Variables ***
${FLEETURL}=            http://192.168.10.1:33080/api
${WS_FLEETURL}=         ws://192.168.10.1:33080
${RsPath}               ${EXECDIR}//Resources//AssistanceRequest//AssistanceRequestREST
${Msg}                  AssistReqTest
${AssistAsePhNum}       +46700000000
${AssistReqDestNone}    0
${AssistReqDestBoth}    3
${EmergAsePhNum}        +46700000000
${EmergReqDestNone}     0
${EmergReqDestBoth}     3
${void_date}            1970-01-01T00:00:00Z  # String is interpreted as void/null/None
${too_long_message}=   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed auctor malesuada maximus. Suspendisse efficitur finibus sapien, hendrerit porta diam viverra id. Vestibulum at sem ut dui gravida malesuada. Cras eget diam ut erat ornare gravida non ac libero. Maecenas mollis purus nec tincidunt rhoncus. Duis rutrum ultricies nisl eu venenatis. Aenean ac orci vitae lorem maximus volutpat. Aenean ut libero mattis, molestie lacus maximus, bibendum dolor. Integer quis porttitor ante. Aenean aliquam lectus et mi rutrum, non iaculis est ornare.

*** Test Cases ***
AssistReq
    [Documentation]    Assistance request enable and and request via REST interface
    ...                Enables the assistance (and emergency) request. Sends an assistance request via REST
    ...                and checks that expected notifications are received. Also checks the assistance
    ...                request via REST
    [Tags]             LD_Req-42245    LD_Req-42246    LD_Req-42248    LD_Req-42247    LD_Req-42249    LD_Req-42250
    ...                LD_Req-42251     LD_Req-42257   LD_Req-42259    LD_Req-42261    LD_Req-42264    
    ...                LD_Req-42272    LD_Req-42274    LD_Req-42277    LD_Req-42276    LD_Req-42278
    ...                LD_Req-42268     LD_Req-42269
    Log_To_Console    \nPrepare test, login and setup

    Create Driver And Login REST  ${WS_FLEETURL}  driver1  1256  Driver1

    CTA Send Message Expect Response    assistanceSettingsReqBoth.xml   assistanceSettingsResp.xml

    Log_To_Console    Connecting WebSocket
    WS Connect                      ${WS_FLEETURL}  timeout=10
    WS start pinger

    Log_To_Console    Disable Assistance Request Service
    CTA Send Message Expect Response    assistanceSettingsReqNone.xml   assistanceSettingsResp.xml    
    Log_To_Console    Verify that Assistance Request Service is turned off
    ${assistEnabled}=   Get Assistances Service Status
    Should Be Equal     ${assistEnabled}  ${False}
    
    #Resource version
    ${availabilityChanged}=  Check notification  /services
    Dictionary should contain item  ${availabilityChanged}  event       serviceAvailabilityChanged
    Dictionary should contain item  ${availabilityChanged}  serviceId   /assistances
    Dictionary should contain item  ${availabilityChanged}  enabled     False

    
    #Major version
    ${n}=  check notification  /services    return_only_payload=${False}
    Dictionary should contain item  ${n}  messageType      notification
    Dictionary should contain item  ${n}  protocolVersion  ${1}

    ${n}=  Get From Dictionary      ${n}  notification
    Dictionary should contain item  ${n}  majorVersion  ${2}
    Dictionary should contain item  ${n}  minorVersion  ${0}

    ${n}=  Get From Dictionary      ${n}  payload
    ${n}=  Get From List            ${n}  0
    Dictionary should contain item  ${n}  event      serviceAvailabilityChanged
    Dictionary should contain item  ${n}  serviceId  /assistances
    Dictionary should contain item  ${n}  enabled    ${False}
    Dictionary should contain key   ${n}  additionalInfo
    Dictionary should contain key   ${n}  serviceVersion
        
    Log_To_Console    Enable Assistance Request Service
    CTA Send Message Expect Response    assistanceSettingsReqBoth.xml   assistanceSettingsResp.xml
    CTA Send Message Expect Response    emergencySettingsReqBoth.xml    emergencySettingsResp.xml
    
    ${availabilityChanged}=  Check notification  /services
    Dictionary should contain item  ${availabilityChanged}  event       serviceAvailabilityChanged
    Dictionary should contain item  ${availabilityChanged}  serviceId   /assistances
    Dictionary should contain item  ${availabilityChanged}  enabled     True

    #Major version
    ${n}=  check notification  /services    return_only_payload=${False}
    Dictionary should contain item  ${n}  messageType      notification
    Dictionary should contain item  ${n}  protocolVersion  ${1}

    ${n}=  Get From Dictionary      ${n}  notification
    Dictionary should contain item  ${n}  majorVersion  ${2}
    Dictionary should contain item  ${n}  minorVersion  ${0}

    ${n}=  Get From Dictionary      ${n}  payload
    ${n}=  Get From List            ${n}  0
    Dictionary should contain item  ${n}  event      serviceAvailabilityChanged
    Dictionary should contain item  ${n}  serviceId  /assistances
    Dictionary should contain item  ${n}  enabled    ${True}
    Dictionary should contain key   ${n}  additionalInfo
    Dictionary should contain key   ${n}  serviceVersion
    
    Log_To_Console    Verify that Assistance Request Service is enabled
    ${assistEnabled}=   Get Assistances Service Status
    Should Be Equal     ${assistEnabled}  ${True}       

    ${AssistReq}=    Create_Dictionary    message    ${Msg}
    ${aer}=  CTA Receive Message async    assistanceEmergencyReport.xml
    Post    /assistances    ${AssistReq}
    CTA Wait until  ${aer}

    Log_To_Console    Check for responses msgSendInitiated and msgSent

    ${n}=  Check notification    /assistances
    Check for assistance notifications  ${n}  msgSendInitiated      # notification: msgSendInitiated

    ${n}=  Check notification    /assistances
    Check for assistance notifications  ${n}  msgSent               # notification: msgSent

    Log_To_Console    Get and verify assistance report
    ${AssistReport}=    get    /assistances/report

    ${a_drivername}=    get from dictionary    ${AssistReport}    driverName
    Should Contain    ${a_drivername}    Driver1

    Log_To_Console      Check that init time is valid
    ${a_timeofinit}=    get from dictionary    ${AssistReport}    timeOfInitiation
    ${a_date}=          get from dictionary    ${a_timeofinit}    dateTime
    Should Not Contain    ${a_date}    ${void_date}

    Log_To_Console      Check that recepetion time is valid
    ${a_timeofrec}=     get from dictionary    ${AssistReport}    timeOfReception
    ${a_date}=          get from dictionary    ${a_timeofrec}    dateTime
    Should Not Contain    ${a_date}    ${void_date}

    Log_To_Console      Check that acknowledge time isn't set yet
    ${a_timeofack}=     get from dictionary    ${AssistReport}    timeofAcknowledge
    ${a_date}=          get from dictionary    ${a_timeofack}    dateTime
    Should Contain    ${a_date}    ${void_date}

    Log_To_Console    Check for response msgAcknowledged
    CTA Send Message    assistanceAcknowledge.xml
    Sleep    5s
    ${msgSendAck}=    Check notification    /assistances
    Dictionary should contain item    ${msgSendAck}    event    msgAcknowledged
    Sleep    5s

    Log_To_Console    Check that new reports contains the timeofAcknowledge
    ${AssistReport}=    get    /assistances/report

    Log_To_Console      Check that acknowledge time is set
    ${a_timeofack}=     get from dictionary    ${AssistReport}    timeofAcknowledge
    ${a_date}=          get from dictionary    ${a_timeofack}    dateTime
    Should Not Contain    ${a_date}    ${void_date}

    Log_To_Console    Disconnecting from the WebSocket

    WS stop threads
    WS Close

    Log_To_Console    Logout driver
    Logout Driver REST  ${WS_FLEETURL}  driver1  Driver1

AssistReqSettings
    [Documentation]    Verify update of assistance request settings
    [Tags]             LD_Req-42245    LD_Req-42247
    Comment            OBS shall support the following Assistance request settings:    * AssReq_AsePhoneNumber    The phone number to ASE (ActionService Europe)    * AssReq_RequestDestination    The receivers of the message

    Log_To_Console    \nStep 1: Sending Assistance Request Settings with /ASSISTANCE/REQUESTDESTINATION set to None and dummy /ASSISTANCE/ASEPHONENUMBER
    ${Parsed}=    Parse_Xml    ${RsPath}//AssistReqSettings//assistanceSettingsReqNone.xml
    ${AssistAsePhNum}    Get_Element_Text    ${Parsed}    xpath=assistanceSettingsReq/asePhoneNumber/msisdn
    CTA_Send_Message_Expect_Response    assistanceSettingsReqNone.xml    assistanceSettingsResp.xml
    Log_To_Console    Step 2: Verify /ASSISTANCE/ASEPHONENUMBER, /ASSISTANCE/REQUESTDESTINATION are set in OBS
    ${temp}    Telnet_Tgw_Cli_Get_Parameter    /ASSISTANCE/ASEPHONENUMBER
    Should_Be_Equal    ${temp}    ${AssistAsePhNum}
    ${temp}    Telnet_Tgw_Cli_Get_Parameter    /ASSISTANCE/REQUESTDESTINATION
    Should_Be_Equal    ${temp}    ${AssistReqDestNone}
    Log_To_Console    Step 3: Sending Assistance Request Settings with /ASSISTANCE/REQUESTDESTINATION set to Both and dummy /ASSISTANCE/ASEPHONENUMBER
    CTA_Send_Message_Expect_Response    assistanceSettingsReqBoth.xml    assistanceSettingsResp.xml
    ${temp}    Telnet_Tgw_Cli_Get_Parameter    /ASSISTANCE/ASEPHONENUMBER
    Should_Be_Equal    ${temp}    ${AssistAsePhNum}
    ${temp}    Telnet_Tgw_Cli_Get_Parameter    /ASSISTANCE/REQUESTDESTINATION
    Should_Be_Equal    ${temp}    ${AssistReqDestBoth}


EmergReqSettings
    [Documentation]    Verify update of emergency request settings
    [Tags]             LD_Req-42246    LD_Req-42248
    Comment            OBS shall support the following Assistance request settings:    * EmerReq_AsePhoneNumber    The phone number to ASE (ActionService Europe)    * EmerReq_RequestDestination    The receivers of the message

    Log_To_Console    \nStep 1: Sending Emergency Request Settings with /EMERGENCYASSISTANCE/REQUESTDESTINATION set to None and dummy /EMERGENCYASSISTANCE/ASEPHONENUMBER
    ${Parsed}=    Parse_Xml    ${RsPath}//EmergReqSettings//emergencySettingsReqNone.xml
    ${AssistAsePhNum}    Get_Element_Text    ${Parsed}    xpath=emergencySettingsReq/asePhoneNumber/msisdn
    CTA_Send_Message_Expect_Response    emergencySettingsReqNone.xml    emergencySettingsResp.xml
    Log_To_Console    Step 2: Verify /EMERGENCYASSISTANCE/ASEPHONENUMBER, /EMERGENCYASSISTANCE/REQUESTDESTINATION are set in OBS
    ${temp}    Telnet_Tgw_Cli_Get_Parameter    /EMERGENCYASSISTANCE/ASEPHONENUMBER
    Should_Be_Equal    ${temp}    ${EmergAsePhNum}
    ${temp}    Telnet_Tgw_Cli_Get_Parameter    /EMERGENCYASSISTANCE/REQUESTDESTINATION
    Should_Be_Equal    ${temp}    ${EmergReqDestNone}
    Log_To_Console    Step 3: Sending Assistance Request Settings with /EMERGENCYASSISTANCE/REQUESTDESTINATION set to Both and dummy /EMERGENCYASSISTANCE/ASEPHONENUMBER
    CTA_Send_Message_Expect_Response    emergencySettingsReqBoth.xml    emergencySettingsResp.xml
    ${temp}    Telnet_Tgw_Cli_Get_Parameter    /EMERGENCYASSISTANCE/ASEPHONENUMBER
    Should_Be_Equal    ${temp}    ${EmergAsePhNum}
    ${temp}    Telnet_Tgw_Cli_Get_Parameter    /EMERGENCYASSISTANCE/REQUESTDESTINATION
    Should_Be_Equal    ${temp}    ${EmergReqDestBoth}
    Log_To_Console    Step 4: EmergReqSettings finished

Ask for assistance and check language support
    [Documentation]
    [Tags]    LD_Req-42274    LD_Req-42276    LD_Req-42277    LD_Req-42278
    # Pre
    Create Driver And Login REST  ${WS_FLEETURL}  driver1  1256  Driver1
    WS Connect  ${WS_FLEETURL}  timeout=10
    WS start pinger

    CTA Send Message Expect Response    assistanceSettingsReqBoth.xml   assistanceSettingsResp.xml

    # Prepare request
    ${ignore}=  Set Variable  .*
    ${shortMessage}=  Set Variable  abcåäö

    ${xmlroot}=   parse xml  <pdu service="12" version="3"><assistanceEmergencyReport /></pdu>
    ${body}=      get element    ${xmlroot}   assistanceEmergencyReport
    add element   ${body}    <msgId>${ignore}</msgId>
    add element   ${body}    <driverId>${ignore}</driverId>
    add element   ${body}    <alarmType><assistance>${ignore}</assistance></alarmType>
    add element   ${body}    <driverName>${ignore}</driverName>
    add element   ${body}    <driverPhonenumber>${ignore}</driverPhonenumber>
    add element   ${body}    <driverNativeLanguage>${ignore}</driverNativeLanguage>
    add element   ${body}    <vehiclePosition><timestamp>${ignore}</timestamp><latitude>${ignore}</latitude><longitude>${ignore}</longitude><altitudeMeter>${ignore}</altitudeMeter><headingDegree>${ignore}</headingDegree></vehiclePosition>
    add element   ${body}    <shortMessage>${shortMessage}</shortMessage>

    ${req}=      set variable  ${TEMPDIR}${/}assistanceEmergencyReport.xml
    save xml      ${xmlroot}  ${req}

    # Ask for assistance
    ${resp}=  CTA Receive Message Async  ${req}
    ${msg}=  create dictionary  message  ${shortMessage}
    Post  /assistances  ${msg}
    CTA Wait Until  ${resp}

    ${n}=  Check notification    /assistances
    Check for assistance notifications  ${n}  msgSendInitiated      # notification: msgSendInitiated

    ${n}=  Check notification    /assistances
    Check for assistance notifications  ${n}  msgSent               # notification: msgSent

    # Response
    ${xmlroot}=   parse xml  <pdu service="12" version="3"><assistanceAcknowledge /></pdu>
    ${body}=      get element    ${xmlroot}   assistanceAcknowledge
    add element   ${body}    <msgId>${ignore}</msgId>
    ${resp}=      set variable  ${TEMPDIR}${/}assistanceAcknowledge.xml
    save xml      ${xmlroot}  ${resp}

    # Send acknowledged
    CTA Send Message    ${resp}
    Sleep    5s
    ${msgSendAck}=    Check notification    /assistances
    Dictionary should contain item    ${msgSendAck}    event    msgAcknowledged

    # Post
    WS stop threads
    WS Close
    Logout Driver REST  ${WS_FLEETURL}  driver1  Driver1

Check_response_for_long_message
    [Documentation]    For an assistance request issue (obt-5313) a to long 'short' message. status code shoudld be 400.
    [Tags]
    WS Connect  ${WS_FLEETURL}  timeout=10
    WS start pinger
	Succeed Login Driver    ${tachoDr1Id}
	
    CTA Send Message Expect Response    assistanceSettingsReqBoth.xml   assistanceSettingsResp.xml

    ${msg}=  create dictionary  message  ${too_long_message}
    Post  /assistances  ${msg}    status_code=${400}

    Succeed Logout Driver    ${tachoDr1Id}
    WS stop threads
    WS Close


*** Keywords ***

AssistanceRequest Suite Setup
    # Simple suite setup, performs basic setup

    ## # Sleep a while to avoid unwanted/unexpected notifications
    ## Sleep    60s

    Basic Suite Setup
    canoe set environment variable      EnvVehicleSpeed     65
    canoe set environment variable      EnvTachoStartStop    1

    ${HEADERS}=  create dictionary  Content-Type  application/json  Accept  resourceVersion\=1
    set suite variable  ${HEADERS}
    ${deepSleepTime}=  set variable  ${90}
    set suite variable  ${deepSleepTime}

    CTA Wait Until Alive                5m
    Telnet TGW CLI Send command         setpar /GLOBAL/VEHICLESETTINGS/STANDBYTIME=${deepSleepTime}
    Sleep                               11s

    # FIXME for now Bus Power Off
    Sleep                               10s
    Set mode accessory

    CTA Wait Until Alive                5m

    Run Keyword If          '${ENV}' == 'UTESP' and '${ARCHITECTURE}' == 'TEA2'      WLAN Preparation

    CTA Send Message                    disableDTJ.xml
    CTA Send Message                    disableMessaging.xml
    CTA Send Message                    disableOrders.xml
    CTA Send Message                    disableTDD.xml



AssistanceRequest Test Setup
    Set mode drive
    Basic Setup
    ${driverLoginConfig}=        Driver Authentication Create Login Config    10    40000    40000    True
    ${cleanoutDriversConfig}=    Driver Authentication Create Login Config     0        1    40000    True

    canoe set environment variable      EnvCountry               0
    canoe set environment variable      EnvDrivercardsDriver1    0
    CTA Wait Until Alive                5m
    CTA Send Message                    ${cleanoutDriversConfig}
    Sleep                               15s
    CTA Send Message                    ${driverLoginConfig}
    Sleep                               5s
    Driver Authentication Remove XML File  ${driverLoginConfig}
    Driver Authentication Remove XML File  ${cleanoutDriversConfig}


AssistanceRequest Suite Teardown
    Basic suite teardown
    Run Keyword If          '${ENV}' == 'UTESP' and '${ARCHITECTURE}' == 'TEA2'       WLANHelper Suite Teardown


AssistanceRequest Test Teardown
    canoe set environment variable      EnvDrivercardsDriver1    0

    :for  ${id}  in  driver1
    \  ${USER_CRED}=  Create Dictionary  driverId  ${id}
    \  run keyword and ignore error
    \  ...  Post  /drivers/actions/logout  ${USER_CRED}

    Run Keyword And Ignore Error  WS stop threads
    Run Keyword And Ignore Error  WS Close
    Basic Teardown

Get Assistances Service Status  
    [Documentation]   Call The Services API to find out if the assistances service is enabled or not
    [return]          ${assistancesEnabled}
    
    ${assistance_id}=  Set Variable  /assistances
    
    ${sc}=  Get  /services
    ${services}=  get from dictionary  ${sc}  services
    :for  ${service}  in  @{services}
    \     ${serviceId}=       get from dictionary  ${service}  serviceId    
    \     ${serviceEnabled}=  get from dictionary  ${service}  enabled    
    \     ${serviceFound}=    Set Variable If  "${serviceId}" == "${assistance_id}"  ${True}  ${False}
    \     Run Keyword If      ${serviceFound} == ${True}  Exit For Loop
    
    ${assistancesEnabled}=    Set Variable If  ${serviceFound} == ${True}  ${serviceEnabled}  ${False}
        
Set mode drive
    [Documentation]  Enter drive mode.
    Bus Power On
    Bus On
    Bus Set Keypos and VM  Drive

Set mode accessory
    [Documentation]  Enter accessory mode.
    Bus Power ON
    Bus On
    Bus Set Keypos and VM  Accessory

Check for assistance notifications
    [Arguments]        ${n}  ${expectedNotification}
    [Documentation]    Check for assistance notifications that sometimes switches order.

    ${event}=  Get From Dictionary  ${n}  event

    Run Keyword If  '${event}'=='msgSendInitiated'  Dictionary should contain item  ${n}  event  msgSendInitiated
    ...  ELSE IF    '${event}'=='msgSent'           Dictionary should contain item  ${n}  event  msgSent
    ...  ELSE                                       Fail  AssistanceRequest - Unexpected notification received: ${n}

    # If the notifications have switched order, write a warning in log.
    Run Keyword If  '${event}'!='${expectedNotification}'  LOG  AssistanceRequest: ${event} != ${expectedNotification}  WARN
